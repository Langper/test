from werkzeug.utils import secure_filename
import json,time,sys,os,datetime,xlrd,xlwt,xlsxwriter,math
from xlutils.copy import copy
from xlrd import xldate_as_tuple
from views.common.com_file import delete_file

def delete_excel(dir_path = '\static\\temp\\userexcel\\'):
    if os.path.exists(dir_path):
        for prefix,dirs,files in os.walk(dir_path):
            for name in files:
                timeArray1 = datetime.datetime.strptime(name[-13:-7],'%Y%m%d')
                diff = datetime.datetime.now() - timeArray1
                if(diff.days>=1):
                    os.remove(os.path.join(prefix, name))

def change_excle_date(content,date_format):
    if isinstance(content,str):
        if content[4:5]=="-":
            date=datetime.datetime.strptime(content,'%Y-%m-%d')
        elif content[4:5]=="/":
            try:
                date=datetime.datetime.strptime(content,'%Y/%m/%d')
            except Exception as e:
                date=datetime.datetime.strptime(content,'%m/%d/%Y')
        else:
            date=datetime.datetime.strptime(content,'%m/%d/%Y')
    else:
        date = datetime.datetime(*xldate_as_tuple(content, 0))
    return date.strftime(date_format)

def save_excel(f,dir_path = ''):
    if dir_path == "":
        raise Exception("path is null in save_excel")
    strtime = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
    (shotname,extension) = os.path.splitext(f.filename)
    upload_path = dir_path + shotname + strtime + extension
    f.save(upload_path)
    return upload_path

def read_excel(path,colnames=None):
    try:
        data = xlrd.open_workbook(path)
        table = data.sheets()[0]
        nrows = table.nrows
        ncols = table.ncols
        if(colnames is None):
            colnames = table.row_values(0)
        content = []
        for rownum in range(1,nrows):
            row = table.row_values(rownum)
            if row:
                ad = {}
                for i in range(ncols):
                    ad[colnames[i]] = row[i]
                content.append(ad)
        return content
    except Exception as e:
        raise Exception("Error in read excel:" + str(e))
def check_excel(template_path,check_path,colnameindex = 0):
    if not os.path.exists(template_path):
        raise Exception("func:check_excel,template_path does not exist !")
    if not os.path.exists(check_path):
        raise Exception("func:check_excel,check_path does not exist !")

    template_ncols,template_colnames = get_excel_colinfo(template_path,colnameindex)
    check_ncols,check_colnames = get_excel_colinfo(check_path,colnameindex)
    data = xlrd.open_workbook(template_path)
    table = data.sheets()[0]
    nrows = table.nrows
    if check_ncols == template_ncols:
        for cnum in range(0,check_ncols):
            if check_colnames[cnum] != template_colnames[cnum]:
                raise Exception("Your excel is error!Name of the column:%s is inconsistent with the template!"%check_colnames[cnum])
    else:
        raise Exception("Your excel is error!The number of columns in this excel is inconsistent with the template!")
    return table.row_values(1)


def get_excel_colinfo(path,colnameindex=0):
    if not os.path.exists(path):
        raise Exception("func:get_excel_colnames,path does not exist !")
    data = xlrd.open_workbook(path)
    table = data.sheets()[0]
    ncols = table.ncols
    colnames = table.row_values(colnameindex)
    return ncols,colnames
def open_excle_template(path):
    template = xlrd.open_workbook(path)
    xl = copy(template)
    table = xl.sheets()[0]
def set_style():
    pass
def set_style_2():
    pass

def change_excle_column(col=0):
    CH = 'A'
    col_first = ''
    col_second = ''

    if(col<=25):
        result = chr(ord(CH)+col)
    else:
        int_num = col//26
        rem_num = col%26
        col_first = chr(ord(CH)+int_num-1)
        col_second = chr(ord(CH)+rem_num)
        result = col_first + col_second
    return result
def generate_workbook_sheet(path_base_excel,shot_name="func",sheet_name="sheet1"):
    delete_file(path_base_excel)
    strtime = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
    filename = shot_name + strtime + ".xlsx"
    path = os.path.join(path_base_excel,filename)
    workbook = xlsxwriter.Workbook(path)
    worksheet = workbook.add_worksheet(sheet_name)#sheet name
    return workbook,worksheet,filename

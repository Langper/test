from views.common.com_read import get_FirstDayInWeek_by_add_day,get_Day_by_add_week,\
get_param_values
from views.DAL.dal_pc_commit import search_pc_by_condition,search_pc_total_by_condition
import datetime
from views.common.com_file import com_log_txt
from views.common.ExcelController import generate_workbook_sheet,change_excle_column

class PC_Update(object):
    def __init__(self, request):
        super(PC_Update, self).__init__()
        self.user_id = request.args.get("user_id",'')
    def get_data_by_excel(request):
        f = request.files["excel"]
        child_path = 'C:\\Apache24\\htdocs\\gscm-api\\code\\static\\temp\\pc_commit\\'
        delete_file(child_path)
        path = save_file(f,child_path)
        template_path = 'C:\\Apache24\\htdocs\\gscm-api\\code\\templates\\excel\\pc_commit_upload.xlsx'
        check_excel(template_path,path,0)
        contents = read_excel(path)
        return contents


class PC_Search(object):
    """docstring for PC_Search"""
    def __init__(self, request):
        super(PC_Search, self).__init__()
        self.plant = request.args.get("plant",'')
        self.select_date = request.args.get("select_date",'')
        self.hhpn = request.args.get("hhpn",'')
        self.module = request.args.get("module",'')
        self.demand_type = request.args.get("demand_type",'All')
        self.has_last_week = request.args.get("has_last_week",'false')
        self.set_show_qty_type()
        self.formate = '%Y-%m-%d'
        self.set_firstday_param()
        self.set_firstday()
        self.set_last_versionday()

    def list_all_member(self):
        for name,value in vars(self).items():
          print('%s=%s'%(name,value))
    def set_show_qty_type(self):
        if self.has_last_week == 'true':
            self.show_qty_type = ['demand','materials ready','PC commit(last week)',\
            'PC1 commit(last week)','PC2 commit(last week)','PC commit(this week)',\
            'PC1 commit(this week)','PC2 commit(this week)','Total commit(this week)',\
            'balance(this week)']
        else :
            self.show_qty_type = ['demand','materials ready','PC commit(this week)',\
            'PC1 commit(this week)','PC2 commit(this week)','Total commit(this week)',\
            'balance(this week)']
    #从数据库 biz_config 表中获取相应工厂号 Shipping Plan 功能的周起始日
    #数据来源于shipping plan，所以要与shipping plam 保持一致
    def set_firstday_param(self):
        self.first_day_param = get_param_values(self.plant,"FirstDayOfShippingPlan")[0]

    #根据 first_day_param 获得本周对应的版本日期
    def set_firstday(self):
        date_now = datetime.datetime.now().strftime(self.formate)
        self.version_date = get_FirstDayInWeek_by_add_day(date_now,self.formate,self.first_day_param)

    def set_last_versionday(self):
        if self.has_last_week == 'ture':
            self.last_version_date = get_Day_by_add_week(self.version_date,self.formate,-1)
        else:
            self.last_version_date = ''
    def generate_table(self):
        self.info_head,self.info_head_type,self.info_date,self.info_item,self.info_hort,self.info_last_hort = search_pc_by_condition(self)
        self.table = []
        if not self.info_head:
            return
        self.generate_table_dates()
        # com_log_txt('pc_commit','table_items:\n'+str(self.info_item))
        for item in self.info_item:
            temp_row = {
                "demand_type":item.demand_type,
                "module":item.module,
                "hhpn":item.hhpn,
                "hort":[]
            }
            temp_horts = []
            for qty_type in self.show_qty_type:
                temp_hort = self.generate_table_row(item,qty_type)
                temp_horts.append(temp_hort)
            temp_row["hort"] = temp_horts
            self.table.append(temp_row)
            #create_by
        self.generate_table_tail_row()

    '''从数据库查询满足条件的demand_type 按照qty_type,demand_type,fcst_date 加总'''
    def generate_table_tail_row(self):
        total_type = ["demand","materials ready","Total commit"]
        info_total = search_pc_total_by_condition(self,total_type)
        total_type_show = ["Total demand","Total materials ready","Total commit(this week)"]

        first_date = self.info_date[0].fcst_date

        pre_date = get_Day_by_add_week(first_date,self.formate,0)
        pre = 0
        self.table_tail = []

        for demand_type in self.info_head_type:
            # demand_type
            temp_demand_type = {
                "demand_type":'',
                "total_demand_type":'',
                "hort":[]
            }
            temp_demand_type["demand_type"] = demand_type.demand_type
            # demand_type Total
            temp_demand_type["total_demand_type"] = demand_type.demand_type + ' Total'
            # item 的 qty 类型数据
            qty_type_index = 0
            for qty_type in total_type_show:
                temp_hort = {
                    "qty_type":qty_type,
                    "qtys":[],
                    "create_by":self.info_head.create_by,
                    "create_date":self.info_head.create_date,
                    "modified_by":'',
                    "modified_date":''
                }
                temp_qtys = []
                pre = 0
                find_flag = False
                while pre < len(info_total):
                    hort = info_total[pre]
                    if demand_type.demand_type == hort.demand_type and hort.qty_type in qty_type:
                        find_flag = True
                        for date_i in range(len(self.info_date)):
                            if pre < len(info_total):
                                hort = info_total[pre]
                                if demand_type.demand_type == hort.demand_type \
                                and hort.qty_type in qty_type:
                                    pre_date = get_Day_by_add_week(first_date,self.formate,date_i)
                                    if hort.fcst_date == pre_date:
                                        if not hort.qty:
                                            temp_qtys.append({'qty':''})
                                        else:
                                            temp_qtys.append({'qty':int(hort.qty)})
                                        info_total.remove(hort)
                                    else:
                                        temp_qtys.append({'qty':''})
                                else:
                                    temp_qtys.append({'qty':''})
                            else:
                                temp_qtys.append({'qty':''}) # 没有对应数据

                    else:
                        pre += 1
                    if find_flag:
                        break

                if not find_flag:
                    for date_i in range(len(self.info_date)):
                        temp_qtys.append({'qty':''})

                temp_hort["qtys"] = temp_qtys
                temp_demand_type["hort"].append(temp_hort)
            self.table_tail.append(temp_demand_type)

    def generate_table_dates(self):
        self.table_dates = []
        for item in self.info_date:
            self.table_dates.append({"date":item.fcst_date})

    def generate_table_row(self,item,qty_type):
        temp_hort = {
            "qty_type":qty_type,
            "qtys":[],
            "req_item_id":'',
            "req_id":'',
            "req_type_id":'',
            "freeze_status":item.freeze_status,
            "create_by":self.info_head.create_by,
            "create_date":self.info_head.create_date,
            "modified_by":'',
            "modified_date":''
        }
        temp_qtys = []
        find_flag = False
        first_date = self.info_date[0].fcst_date

        pre_date = get_Day_by_add_week(first_date,self.formate,0)
        pre = 0
        modified_by = ''
        modified_date = ''
        req_item_id = ''
        req_id = ''
        req_type_id = ''
        # freeze_status = 0
        # 如果是上周数据 就把 参与计算的hort替换为上周
        if "last week" in qty_type:
            info_horts = self.info_last_hort
        else :
            info_horts = self.info_hort

        while pre < len(info_horts):
            hort = info_horts[pre]

            if hort.hhpn == item.hhpn and hort.module == item.module and \
            hort.demand_type == item.demand_type and hort.qty_type in qty_type:
                find_flag = True
                for date_i in range(len(self.info_date)):
                    if pre < len(info_horts):
                        hort = info_horts[pre]
                        if hort.hhpn == item.hhpn and hort.module == item.module and \
                        hort.demand_type == item.demand_type and hort.qty_type in qty_type:
                            pre_date = get_Day_by_add_week(first_date,self.formate,date_i)
                            if hort.fcst_date == pre_date:
                                temp_qtys.append({'qty':hort.qty})
                                if "last week" in qty_type:
                                    self.info_last_hort.remove(info_horts[pre])
                                else :
                                    self.info_hort.remove(info_horts[pre])
                                modified_by = hort.modified_by
                                modified_date = hort.modified_date
                                req_item_id = hort.req_item_id
                                req_id = hort.req_id
                                req_type_id = hort.req_type_id
                            else:
                                temp_qtys.append({'qty':''})
                        else:
                            temp_qtys.append({'qty':''})
                    else:
                        temp_qtys.append({'qty':''}) # 没有对应数据

            else:
                pre += 1
            if find_flag:
                break

        if not find_flag:
            for date_i in range(len(self.info_date)):
                temp_qtys.append({'qty':''})

        temp_hort["qtys"] = temp_qtys # 该类型每周相应数量
        temp_hort["modified_by"] = modified_by #同种 Qty_type 修改人，修改时间，req_item_id,freeze_status 保持一致
        temp_hort["modified_date"] = modified_date
        temp_hort["req_item_id"] = req_item_id
        temp_hort["req_id"] = req_id
        temp_hort["req_type_id"] = req_type_id

        return temp_hort

    def generate_excel(self):
        self.info_head,self.info_head_type,self.info_date,self.info_item,self.info_hort,self.info_last_hort = search_pc_by_condition(self)
        # com_log_txt('test',"self.info_head:\n"+str(self.info_head))
        # com_log_txt('test',"self.info_date:\n"+str(self.info_date))
        com_log_txt('test',"self.info_item:\n"+str(self.info_item))
        com_log_txt('test',"self.info_hort:\n"+str(self.info_hort))
        com_log_txt('test',"self.info_hort:\n"+str(self.info_last_hort))
        self.path_base_excel = "C:\\Apache24\\htdocs\\excel\\pc_commit\\"
        self.workbook,self.worksheet,self.filename = generate_workbook_sheet(self.path_base_excel,"pc_commit","pc_commit")
        self.path_excel_ip = "http://gscm-excel.efoxconn.com:81/pc_commit/"
        self.download_url = self.path_excel_ip + self.filename
        self.generate_style()
        if not self.info_item or not self.info_head:
            self.worksheet.write(0,0,"No Such Data!",self.normal)
            head_width = change_excle_column(0) + ":" + change_excle_column(0)
            self.worksheet.set_column(head_width,20)
        else:
            self.generate_excel_head()
            self.generate_excel_item()
            self.set_excel_column_width()
        self.workbook.close()

    def generate_style(self):
        self.normal = self.workbook.add_format({'font_size':11,'align':'center','border':1})
        self.bg_green_bold = self.workbook.add_format({'font_size':11,'align':'center','border':1,'bg_color':'#BDE3A4','bold':True})
        self.bg_green = self.workbook.add_format({'font_size':11,'align':'center','border':1,'bg_color':'#BDE3A4'})
        self.bg_blue = self.workbook.add_format({'font_size':11,'align':'center','border':1,'bg_color':'#8DB4E3','bold':True})
        self.font_bold = self.workbook.add_format({'font_size':11,'align':'center','border':1,'bold':True})

        self.bg_green_bold.set_align('vcenter')
        self.bg_blue.set_align('vcenter')
        self.normal.set_align('vcenter')
        self.font_bold.set_align('vcenter')
        self.bg_green.set_align('vcenter')

    def generate_excel_head(self):
        self.head_item = ["Demand type","HH PN","Module"]
        cnum = 0
        for value in self.head_item:
            merge = change_excle_column(cnum) + "1:" + change_excle_column(cnum) + "2"
            self.worksheet.merge_range(merge,value,self.bg_blue)#蓝色背景，字体加粗,head专用
            cnum += 1

        self.worksheet.write(0,cnum,"Data Measure",self.bg_blue)
        self.worksheet.write(1,cnum,"Date",self.bg_blue)
        cnum += 1

        merge = change_excle_column(cnum) + "1:" + change_excle_column(cnum) + "2"
        self.worksheet.merge_range(merge,"Demand type Data Measure",self.bg_blue)# 此列会被隐藏，用于计算Total
        cnum += 1

        for d in self.info_date:
            merge = change_excle_column(cnum) + "1:" + change_excle_column(cnum) + "2"
            self.worksheet.merge_range(merge,d.fcst_date,self.bg_blue)#黄色背景，正常字体
            cnum += 1

        self.head_tail = ["Create By","Create Date","Modified By","Modified Date","req_id","req_type_id","req_item_id"]
        for it in self.head_tail:
            merge = change_excle_column(cnum) + "1:" + change_excle_column(cnum) + "2"
            self.worksheet.merge_range(merge,it,self.bg_blue)#黄色背景，正常字体
            cnum += 1
        self.column_count = cnum -1

    def set_excel_column_width(self):
        head_width = change_excle_column(1) + ":" + change_excle_column(4)
        self.worksheet.set_column(head_width,25)
        head_width = change_excle_column(0) + ":" + change_excle_column(0)
        self.worksheet.set_column(head_width,20)
        head_width = change_excle_column(5) + ":" + change_excle_column(self.column_count-4)
        self.worksheet.set_column(head_width,12)
        head_width = change_excle_column(self.column_count-6) + ":" + change_excle_column(self.column_count-3)
        self.worksheet.set_column(head_width,20)
        self.worksheet.set_column('E:E', 20, None, {'hidden': 1})
        head_hidden = change_excle_column(self.column_count-2) + ":" + change_excle_column(self.column_count)
        self.worksheet.set_column(head_hidden, 20, None, {'hidden': 1})
        self.worksheet.freeze_panes(2, 4)

    def generate_excel_item(self):
        row_num = 2
        data_type_num = len(self.show_qty_type)
        for item in self.info_item:
            # MBu
            col_num = 0
            # 循环输出每个 item 每列内容，共4行,head_item前 2个栏位为req_id,req_type_id 不需要写入excel
            # 所以 item 脚标从 index + 2 Kaiser
            for index in range(len(self.head_item)):#与head_item栏位个数保持一致
                merge = change_excle_column(col_num) + str(row_num+1) + ":" \
                + change_excle_column(col_num) + str(row_num+1+data_type_num-1)
                self.worksheet.merge_range(merge,item[index+2],self.normal)#蓝色背景，字体加粗,head专用
                col_num += 1
            # item 的 qty 类型数据
            qty_type_index = 0
            for qty_type in self.show_qty_type:
                if "this week" in qty_type:
                    self.worksheet.write(row_num + qty_type_index,col_num,\
                    qty_type,self.bg_green)
                    self.worksheet.write(row_num + qty_type_index,col_num+1,\
                    item.demand_type + qty_type,self.bg_green)
                else:
                    self.worksheet.write(row_num + qty_type_index,col_num,\
                    qty_type,self.normal)
                    self.worksheet.write(row_num + qty_type_index,col_num+1,\
                    item.demand_type + qty_type,self.normal)
                qty_type_index += 1
            col_num += 2

            qty_type_index = 0
            for qty_type in self.show_qty_type:
                if "Total commit(this week)" == qty_type:
                    self.generate_excel_total_row(item,row_num+qty_type_index,col_num,qty_type,self.bg_green)
                elif "balance(this week)" == qty_type:
                    self.generate_excel_total_row(item,row_num+qty_type_index,col_num,qty_type,self.bg_green)
                elif "this week" in qty_type:
                    self.generate_excel_type_row(item,row_num+qty_type_index,col_num,qty_type,self.bg_green)
                else:
                    self.generate_excel_type_row(item,row_num+qty_type_index,col_num,qty_type,self.normal)
                qty_type_index += 1

            row_num += data_type_num
        self.generate_excel_demand_type_total_row(row_num)

    def generate_excel_demand_type_total_row(self,row_num):
        total_type = ["demand","materials ready","Total commit(this week)"]
        total_type_len = len(total_type)
        row_range = row_num
        for demand_type in self.info_head_type:
            # demand_type
            col_num = 0
            merge = change_excle_column(col_num) + str(row_num+1) + ":" \
            + change_excle_column(col_num) + str(row_num+1+total_type_len-1)
            self.worksheet.merge_range(merge,demand_type.demand_type,self.normal)#蓝色背景，字体加粗,head专用
            # demand_type Total
            col_num += 1
            merge = change_excle_column(col_num) + str(row_num+1) + ":" \
            + change_excle_column(col_num+1) + str(row_num+1+total_type_len-1)
            self.worksheet.merge_range(merge,demand_type.demand_type + ' Total',self.normal)#蓝色背景，字体加粗,head专用
            col_num += 2

            # item 的 qty 类型数据
            qty_type_index = 0
            for qty_type in total_type:
                temp_col_num = col_num
                self.worksheet.write(row_num + qty_type_index,temp_col_num,\
                qty_type,self.normal)
                self.worksheet.write(row_num + qty_type_index,temp_col_num+1,\
                demand_type.demand_type + qty_type,self.normal)
                temp_col_num += 2
                for date_i in self.info_date:
                    formula = "=SUMIF($E$3:$E$"+str(row_range)+',$E'+str(row_num + qty_type_index + 1)\
                    + ',' + change_excle_column(temp_col_num) + '$3:' + change_excle_column(temp_col_num)\
                    +"$" + str(row_range) + ")"
                    self.worksheet.write_formula(row_num + qty_type_index,temp_col_num,formula,self.normal)
                    temp_col_num += 1
                qty_type_index += 1

            row_num += total_type_len

    def generate_excel_total_row(self,item,row_num,col_num,qty_type,style):
        for date_i in range(len(self.info_date)):
            if qty_type == "Total commit(this week)":
                formula = "="+ change_excle_column(col_num) + str(row_num+1 -1) + '+'\
                            + change_excle_column(col_num) + str(row_num+1 -2) + '+'\
                            + change_excle_column(col_num) + str(row_num+1 -3)
            elif qty_type == "balance(this week)":
                if date_i == 0:
                    formula = "="+ change_excle_column(col_num) + str(row_num+1 -1) + '-'\
                                + change_excle_column(col_num) + str(row_num+1-len(self.show_qty_type)+1)
                else:
                    formula = "="+ change_excle_column(col_num) + str(row_num+1 -1) + '-'\
                                + change_excle_column(col_num) + str(row_num+1-len(self.show_qty_type)+1) + '+'\
                                + change_excle_column(col_num-1) + str(row_num+1)

            self.worksheet.write_formula(row_num,col_num,formula,style)
            col_num += 1
        #create_by
        self.worksheet.write(row_num,col_num,self.info_head.create_by,style)
        col_num += 1
        #create_date
        self.worksheet.write(row_num,col_num,self.info_head.create_date,style)
        col_num += 1
        # modified_by
        self.worksheet.write(row_num,col_num,'',style)
        col_num += 1
        # modified_date
        self.worksheet.write(row_num,col_num,'',style)
        col_num += 1
        # req_id
        self.worksheet.write(row_num,col_num,'',style)
        col_num += 1
        # req_type_id
        self.worksheet.write(row_num,col_num,'',style)
        col_num += 1
        # req_item_id
        self.worksheet.write(row_num,col_num,'',style)
        col_num += 1

    def generate_excel_type_row(self,item,row_num,col_num,qty_type,style):
        find_flag = False
        first_date = self.info_date[0].fcst_date

        pre_date = get_Day_by_add_week(first_date,self.formate,0)
        pre = 0

        modified_by = ''
        modified_date = ''
        req_id = ''
        req_item_id = ''
        req_type_id = ''
        # 如果是上周数据 就把 参与计算的hort替换为上周
        com_log_txt("pc_commit","item:\n"+str(item))
        if "last week" in qty_type:
            info_horts = self.info_last_hort
        else :
            info_horts = self.info_hort
        com_log_txt("pc_commit","info_horts:\n"+str(len(info_horts)))
        while pre < len(info_horts):
            hort = info_horts[pre]

            if hort.hhpn == item.hhpn and hort.module == item.module and \
            hort.demand_type == item.demand_type and hort.qty_type in qty_type:
                find_flag = True
                for date_i in range(len(self.info_date)):
                    # com_log_txt('pc_commit',"info_horts.remove\n" + str(info_horts))
                    # com_log_txt('pc_commit',"info_horts.pre\n" + str(pre))
                    if pre < len(info_horts):
                        hort = info_horts[pre]
                        if hort.hhpn == item.hhpn and hort.module == item.module and \
                        hort.demand_type == item.demand_type and hort.qty_type in qty_type:
                            pre_date = get_Day_by_add_week(first_date,self.formate,date_i)
                            if hort.fcst_date == pre_date:
                                self.worksheet.write(row_num,col_num,hort.qty,style)
                                if "last week" in qty_type:
                                    self.info_last_hort.remove(info_horts[pre])
                                else :
                                    self.info_hort.remove(info_horts[pre])
                                modified_by = hort.modified_by
                                modified_date = hort.modified_date
                                req_id = hort.req_id
                                req_type_id = hort.req_type_id
                                req_item_id = hort.req_item_id
                            else:
                                self.worksheet.write(row_num,col_num,'',style) # 没有对应数据
                            col_num += 1
                        else:
                            self.worksheet.write(row_num,col_num,'',style)
                            col_num += 1
                    else:
                        self.worksheet.write(row_num,col_num,'',style) # 没有对应数据
                        col_num += 1
            else:
                pre += 1
            if find_flag:
                break

        if not find_flag:
            for date_i in range(len(self.info_date)):
                self.worksheet.write(row_num,col_num,'',style) # 没有对应数据
                col_num += 1
        #create_by
        self.worksheet.write(row_num,col_num,self.info_head.create_by,style)
        col_num += 1
        #create_date
        self.worksheet.write(row_num,col_num,self.info_head.create_date,style)
        col_num += 1
        # modified_by
        self.worksheet.write(row_num,col_num,modified_by,style)
        col_num += 1
        # modified_date
        self.worksheet.write(row_num,col_num,modified_date,style)
        col_num += 1
        # req_id
        self.worksheet.write(row_num,col_num,req_id,style)
        col_num += 1
        # req_type_id
        self.worksheet.write(row_num,col_num,req_type_id,style)
        col_num += 1
        # req_item_id
        self.worksheet.write(row_num,col_num,req_item_id,style)
        col_num += 1
